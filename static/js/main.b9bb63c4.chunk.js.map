{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","turn","gameEnded","winner","undefined","gameState","board","Array","fill","totalMoves","event","this","target","dataset","square","innerText","setState","result","checkWinner","winnerLine","gameEnd","console","log","moves","i","length","id","onClick","e","clicked","className","data-square","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAyFeA,G,kBApFX,aAAc,IAAD,8BACT,+CACKC,MAAO,CACRC,KAAK,IACLC,WAAW,EACXC,YAAOC,GAGX,EAAKC,UAAW,CACXC,MAAOC,MAAM,GAAGC,KAAK,IACtBC,WAAY,GAVP,E,qEAaLC,GACmD,IAApDC,KAAKN,UAAUC,MAAMI,EAAME,OAAOC,QAAQC,UAC7CH,KAAKN,UAAUC,MAAMI,EAAME,OAAOC,QAAQC,QAAQH,KAAKX,MAAMC,KAC7DS,EAAME,OAAOG,UAAYJ,KAAKX,MAAMC,KACpCU,KAAKK,SAAS,CACVf,KAAyB,KAAnBU,KAAKX,MAAMC,KAAc,IAAM,IACrCK,MAAOK,KAAKX,MAAMM,MAClBG,WAAYE,KAAKX,MAAMS,gBAI3B,IAAIQ,EAAQN,KAAKO,cACH,KAAVD,EACCN,KAAKK,SAAS,CACVd,WAAU,EACVC,OAAO,IACPgB,WAAY,mBAEA,KAARF,EACLN,KAAKK,SAAS,CACVd,WAAU,EACVC,OAAO,IACPgB,WAAY,mBAGN,QAATF,GACLN,KAAKK,SAAS,CACVI,SAAQ,EACRjB,OAAQ,OACRgB,WAAY,kBAGpBE,QAAQC,IAAIX,KAAKN,UAAUI,c,oCAO1B,IAFG,IAAIc,EAAQ,CAAC,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,IACjGjB,EAAOK,KAAKN,UAAUC,MACjBkB,EAAE,EAAEA,EAAED,EAAME,OAAOD,IAC9B,GAAGlB,EAAMiB,EAAMC,GAAG,KAAOlB,EAAMiB,EAAMC,GAAG,KAAOlB,EAAMiB,EAAMC,GAAG,KAAOlB,EAAMiB,EAAMC,GAAG,IAChF,OAAOlB,EAAMiB,EAAMC,GAAG,IAE1B,GAA6B,GAAzBb,KAAKX,MAAMS,WACX,MAAO,S,+BAGJ,IAAD,OACJ,OACA,yBAAKiB,GAAG,QACJ,yBAAKA,GAAI,UAAT,IAAoBf,KAAKX,MAAMmB,YAC/B,yBAAKO,GAAG,QAAR,eAGA,yBAAKA,GAAG,QAAQC,QAAS,SAACC,GAAD,OAAK,EAAKC,QAAQD,KAE1C,yBAAKE,UAAU,SAASC,cAAY,MACrC,yBAAKD,UAAU,SAAUC,cAAY,MACrC,yBAAKD,UAAU,SAAUC,cAAY,MACrC,yBAAKD,UAAU,SAAUC,cAAY,MACrC,yBAAKD,UAAU,SAAUC,cAAY,MACrC,yBAAKD,UAAU,SAAUC,cAAY,MACrC,yBAAKD,UAAU,SAAWC,cAAY,MACtC,yBAAKD,UAAU,SAAWC,cAAY,MACtC,yBAAKD,UAAU,SAASC,cAAY,Y,GA/E9BC,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.b9bb63c4.chunk.js","sourcesContent":["import React,{Component} from 'react';\nimport './App.css';\n\nclass App extends Component {\n    \n    constructor(){\n        super();\n        this.state= {\n            turn:\"X\",\n            gameEnded :false,\n            winner:undefined,\n           \n        }\n        this.gameState ={\n             board: Array(9).fill(\"\"),\n            totalMoves: 0\n        }\n    }\n    clicked(event){\n        if(this.gameState.board[event.target.dataset.square]== \"\"){\n        this.gameState.board[event.target.dataset.square]=this.state.turn;\n        event.target.innerText = this.state.turn;\n        this.setState({\n            turn: this.state.turn == \"X\" ? \"O\" : \"X\",\n            board: this.state.board,\n            totalMoves: this.state.totalMoves++\n        })\n        }\n        \n        var result =this.checkWinner();\n        if (result == \"x\"){\n             this.setState({\n                 gameEnded:true,\n                 winner:\"X\",\n                 winnerLine: \"match won by X\"\n             });\n            }else if(result==\"O\"){\n                this.setState({\n                    gameEnded:true,\n                    winner:\"O\",\n                    winnerLine: \"match won by O\"\n                });\n            }\n        else if (result== \"draw\"){\n            this.setState({\n                gameEnd:true,\n                winner: \"draw\",\n                winnerLine: \"match is draw\"\n            })\n        }\n        console.log(this.gameState.totalMoves);\n    }\n    \n    checkWinner(){\n       \n            var moves = [[0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6], [0, 1, 2], [3, 4, 5], [6, 7, 8]];\n        var board =this.gameState.board;\n         for(let i=0;i<moves.length;i++) {\n      if(board[moves[i][0]] == board[moves[i][1]] && board[moves[i][1]] == board[moves[i][2]])\n          return board[moves[i][0]];\n    }\n      if (this.state.totalMoves == 9){\n          return \"draw\";\n      }  \n    }\n    render(){\n        return (\n        <div id=\"game\">\n            <div id =\"status\"> {this.state.winnerLine}</div>\n            <div id=\"head\">\n            Tic Tac Toe\n            </div>\n            <div id=\"board\" onClick={(e)=>this.clicked(e)}>\n                \n             <div className=\"square\" data-square=\"0\"></div>\n            <div className=\"square\"  data-square=\"1\"></div>\n            <div className=\"square\"  data-square=\"2\"></div>\n            <div className=\"square\"  data-square=\"3\"></div>\n            <div className=\"square\"  data-square=\"4\"></div>\n            <div className=\"square\"  data-square=\"5\"></div>\n            <div className=\"square\"   data-square=\"6\"></div>\n            <div className=\"square\"   data-square=\"7\"></div>\n            <div className=\"square\" data-square=\"8\"></div>\n            </div>\n           \n            </div>\n        );\n    }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}